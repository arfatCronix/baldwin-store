{"version":3,"file":"theme-bundle.chunk.295.js","mappings":"+XAO8C,IAEzBA,EAAe,SAAAC,GAChC,SAAAD,EAAYE,GAAS,IAAAC,GACjBA,EAAAF,EAAAG,KAAA,KAAMF,IAAQ,MACTG,sBAAuBC,EAAAA,EAAAA,GAA4BJ,GAExD,IAAMK,EAAmBC,EAAE,6BAgCrBC,EAAgBD,EAAE,0BAClBE,EAAiBD,EAAcE,KAAK,oCACpCC,GAAoBC,EAAAA,EAAAA,GAAI,CAC1BC,OAAQ,8CACRC,MAAO,IACPC,IAAKC,EAAAA,KAGT,GAAIP,EAAeQ,OAAQ,CACvB,IAAMC,EAAWV,EAAcE,KAAK,oCAC9BS,EAAMD,EAASE,KAAK,OACpBC,EAAeH,EAASE,KAAK,gBAC7BE,EAAMJ,EAASE,KAAK,OACpBG,EAAeL,EAASE,KAAK,gBAYnCT,EAAkBa,IAAI,CAClBC,SAAU,0DACVC,SAAU,SAACC,EAAIC,GACX,IAAMC,EAAYC,OAAOF,GAEpBC,GACDF,GAAG,GAGPA,EAAGE,GAAaV,GAAOU,GAAaP,EACxC,EACAS,aAtB2C,SAACC,GAA4B,QAAAC,EAAAC,UAAAjB,OAAhBkB,EAAW,IAAAC,MAAAH,EAAA,EAAAA,EAAA,KAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAXF,EAAWE,EAAA,GAAAH,UAAAG,GACnE,IACIC,EAAmBN,EAMvB,MAP2B,CAAC,QAAS,SAElBO,SAAQ,SAACC,EAAaC,GACrCH,EAAmBA,EAAiBI,SAASF,GACzCF,EAAiBK,QAAQH,EAAaL,EAAYM,IAClDH,CACR,IACOA,CACX,CAakBM,CAAuC1C,EAAKE,qBAAqByC,yBAA0BxB,EAAcE,IAE/H,CAqEA,GAnEAZ,EAAkBa,IAAI,CAClB,CACIC,SAAU,+CACVC,SAAU,SAACC,EAAIC,GAGXD,EA3EK,SAACC,GACV,OAAOA,EAAIX,MACf,CAuEuB6B,CAA4BlB,GAG/C,EACAG,aAAc7B,EAAKD,QAAQ8C,QAE/B,CACItB,SAAU,gDACVC,SAAU,SAACC,EAAIC,GAGXD,EAjFM,WACV,OAAOqB,EAAAA,EAAUC,MAAKC,MAAfF,EAAAA,EAASd,UACpB,CA6EuBY,CAA6BlB,GAGhD,EACAG,aAAc7B,EAAKD,QAAQkD,SAE/B,CACI1B,SAAU,iDACVC,SAAU,SAACC,EAAIC,GAGXD,EAvFE,SAACC,GACP,OAAOA,EAAIX,MACf,CAmFuB6B,CAAyBlB,GAG5C,EACAG,aAAc7B,EAAKD,QAAQmD,UAE/B,CACI3B,SAAU,kDACVC,SAAU,SAACC,EAAIC,GAGXD,EA7FG,WACP,OAAOqB,EAAAA,EAAUC,MAAKC,MAAfF,EAAAA,EAASd,UACpB,CAyFuBY,CAA0BlB,GAG7C,EACAG,aAAc7B,EAAKD,QAAQoD,WAE/B,CACI5B,SAAU,uEACV6B,YAAa,yDACb5B,SAAU,SAACC,GAGPA,EAAoB,iBAFRnB,EAAcE,KAAK,2CAA2CkB,MAG9E,EACAG,aAAc7B,EAAKD,QAAQsD,WAE/B,CACI9B,SAAU,6CACVC,SAAU,SAACC,GAGPA,EAFYnB,EAAcE,KAAK,uBAAuB8C,IAAI,GAAGC,QAGjE,EACA1B,aAAc7B,EAAKD,QAAQyD,cAE/B,CACIjC,SAAU,8CACVC,SAAU,SAACC,GAGPA,EAFYnB,EAAcE,KAAK,wBAAwB8C,IAAI,GAAGC,QAGlE,EACA1B,aAAc7B,EAAKD,QAAQyD,gBAI/BpD,EAAiBW,OAAQ,CACzB,IAAM0C,EAAazD,EAAK0D,0BAA0BtD,GAElDA,EAAiBuD,GAAG,UAAU,WAG1B,GAFAF,EAAWG,gBAENH,EAAWI,OAAO,SACnB,OAAO,CAEf,GACJ,CAsDG,OApDHvD,EAAcqD,GAAG,UAAU,SAAAG,GAGvB,GAFArD,EAAkBmD,gBAEbnD,EAAkBoD,OAAO,SAC1B,OAAOC,EAAMC,gBAErB,IAsBA1D,EAAE,6BAA6BsD,GAAG,SAAS,SAAAG,GAKvC,GAJAA,EAAMC,iBAENtD,EAAkBmD,eAEbnD,EAAkBoD,OAAO,SAA9B,CAIA,IAAMG,GAAQC,EAAAA,EAAAA,MACRC,EAAgB7D,EAAEyD,EAAMK,eAAejD,KAAK,cAAa,IAAIZ,EAAc8D,YAEjFJ,EAAMK,OAENC,EAAAA,GAAIC,QAAQL,EAAY,CAAC,GAAG,SAACM,EAAKC,GAC9B,GAAID,EACA,OAAOR,EAAMU,cAAc1E,EAAKD,QAAQ4E,cAG5CX,EAAMU,gBAvCM,SAACE,EAAWC,GAC5B,IAAMC,EAAQzE,EAAE,cAAc0E,MAAM,QAAQC,KAAK,cAAe,KAAKC,SAASL,GAAW,GAGnFM,EAAWJ,EAAMK,cAAgBL,EAAMK,cAAcC,SAAWN,EAAMO,gBAE5EH,EAASb,OACTa,EAASI,MAAMT,GACfK,EAASK,QAGT,IAAMC,EAAYC,KAAKrE,IAAKf,EAAEqF,QAAQC,SAAW,IAAM,KAGvDtF,EAAE6E,GAAUU,OAAM,WACd,IAAMD,EAASF,KAAKxE,IAAIiE,EAASW,KAAKC,aAAe,GAAIN,GACzDnF,EAAEyE,GAAOa,OAAOA,EACpB,GACJ,CAwBQI,CADkB1F,EAAE,kBACGoE,EAC3B,GAhBA,CAiBJ,IAAGzE,CACP,C,QAiBC,O,EAjBAF,G,EAAAD,G,sEAAAA,EAAAmG,UAEDtC,0BAAA,SAA0BuC,GACtB,IAAMC,GAAmBxF,EAAAA,EAAAA,GAAI,CACzBC,OAAQsF,EAAazF,KAAK,wBAC1BK,IAAKC,EAAAA,KAWT,OARAoF,EAAiB5E,IAAI,CACjBC,SAAU0E,EAAazF,KAAK,qCAC5BgB,SAAQ,SAACC,EAAIC,GACTD,GAAG0E,EAAAA,EAAAA,GAAqBzE,GAC5B,EACAG,aAAcuE,KAAKlG,qBAAqBmG,2BAGrCH,CACX,EAACrG,CAAA,CAlO+B,CAASyG,EAAAA,E","sources":["webpack://bigcommerce-cornerstone/./assets/js/theme/gift-certificate.js"],"sourcesContent":["import PageManager from './page-manager';\r\nimport nod from './common/nod';\r\nimport checkIsGiftCertValid from './common/gift-certificate-validator';\r\nimport formModel from './common/models/forms';\r\nimport { createTranslationDictionary } from './common/utils/translations-utils';\r\nimport { announceInputErrorMessage } from './common/utils/form-utils';\r\nimport { api } from '@bigcommerce/stencil-utils';\r\nimport { defaultModal } from './global/modal';\r\n\r\nexport default class GiftCertificate extends PageManager {\r\n    constructor(context) {\r\n        super(context);\r\n        this.validationDictionary = createTranslationDictionary(context);\r\n\r\n        const $certBalanceForm = $('#gift-certificate-balance');\r\n\r\n        const purchaseModel = {\r\n            recipientName(val) {\r\n                return val.length;\r\n            },\r\n            recipientEmail(...args) {\r\n                return formModel.email(...args);\r\n            },\r\n            senderName(val) {\r\n                return val.length;\r\n            },\r\n            senderEmail(...args) {\r\n                return formModel.email(...args);\r\n            },\r\n            customAmount(value, min, max) {\r\n                return value && value >= min && value <= max;\r\n            },\r\n            setAmount(value, options) {\r\n                let found = false;\r\n\r\n                options.forEach((option) => {\r\n                    if (option === value) {\r\n                        found = true;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                return found;\r\n            },\r\n        };\r\n\r\n        const $purchaseForm = $('#gift-certificate-form');\r\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\r\n        const purchaseValidator = nod({\r\n            submit: '#gift-certificate-form input[type=\"submit\"]',\r\n            delay: 300,\r\n            tap: announceInputErrorMessage,\r\n        });\r\n\r\n        if ($customAmounts.length) {\r\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\r\n            const min = $element.data('min');\r\n            const minFormatted = $element.data('minFormatted');\r\n            const max = $element.data('max');\r\n            const maxFormatted = $element.data('maxFormatted');\r\n            const insertFormattedAmountsIntoErrorMessage = (message, ...amountRange) => {\r\n                const amountPlaceholders = ['[MIN]', '[MAX]'];\r\n                let updatedErrorText = message;\r\n                amountPlaceholders.forEach((placeholder, i) => {\r\n                    updatedErrorText = updatedErrorText.includes(placeholder) ?\r\n                        updatedErrorText.replace(placeholder, amountRange[i]) :\r\n                        updatedErrorText;\r\n                });\r\n                return updatedErrorText;\r\n            };\r\n\r\n            purchaseValidator.add({\r\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\r\n                validate: (cb, val) => {\r\n                    const numberVal = Number(val);\r\n\r\n                    if (!numberVal) {\r\n                        cb(false);\r\n                    }\r\n\r\n                    cb(numberVal >= min && numberVal <= max);\r\n                },\r\n                errorMessage: insertFormattedAmountsIntoErrorMessage(this.validationDictionary.certificate_amount_range, minFormatted, maxFormatted),\r\n            });\r\n        }\r\n\r\n        purchaseValidator.add([\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.recipientName(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.toName,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.recipientEmail(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.toEmail,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.senderName(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.fromName,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.senderEmail(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.fromEmail,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\r\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\r\n\r\n                    cb(typeof (val) === 'string');\r\n                },\r\n                errorMessage: this.context.certTheme,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"agree\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\r\n\r\n                    cb(val);\r\n                },\r\n                errorMessage: this.context.agreeToTerms,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\r\n\r\n                    cb(val);\r\n                },\r\n                errorMessage: this.context.agreeToTerms,\r\n            },\r\n        ]);\r\n\r\n        if ($certBalanceForm.length) {\r\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\r\n\r\n            $certBalanceForm.on('submit', () => {\r\n                balanceVal.performCheck();\r\n\r\n                if (!balanceVal.areAll('valid')) {\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n\r\n        $purchaseForm.on('submit', event => {\r\n            purchaseValidator.performCheck();\r\n\r\n            if (!purchaseValidator.areAll('valid')) {\r\n                return event.preventDefault();\r\n            }\r\n        });\r\n\r\n        const createFrame = (container, html) => {\r\n            const frame = $('<iframe />').width('100%').attr('frameBorder', '0').appendTo(container)[0];\r\n\r\n            // Grab the frame's document object\r\n            const frameDoc = frame.contentWindow ? frame.contentWindow.document : frame.contentDocument;\r\n\r\n            frameDoc.open();\r\n            frameDoc.write(html);\r\n            frameDoc.close();\r\n\r\n            // Calculate max height for the iframe\r\n            const maxheight = Math.max(($(window).height() - 300), 300);\r\n\r\n            // Auto adjust the iframe's height once its document is ready\r\n            $(frameDoc).ready(() => {\r\n                const height = Math.min(frameDoc.body.scrollHeight + 20, maxheight);\r\n                $(frame).height(height);\r\n            });\r\n        };\r\n\r\n        $('#gift-certificate-preview').on('click', event => {\r\n            event.preventDefault();\r\n\r\n            purchaseValidator.performCheck();\r\n\r\n            if (!purchaseValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            const modal = defaultModal();\r\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\r\n\r\n            modal.open();\r\n\r\n            api.getPage(previewUrl, {}, (err, content) => {\r\n                if (err) {\r\n                    return modal.updateContent(this.context.previewError);\r\n                }\r\n\r\n                modal.updateContent();\r\n\r\n                const container = $('#modal-content');\r\n                createFrame(container, content);\r\n            });\r\n        });\r\n    }\r\n\r\n    checkCertBalanceValidator($balanceForm) {\r\n        const balanceValidator = nod({\r\n            submit: $balanceForm.find('input[type=\"submit\"]'),\r\n            tap: announceInputErrorMessage,\r\n        });\r\n\r\n        balanceValidator.add({\r\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\r\n            validate(cb, val) {\r\n                cb(checkIsGiftCertValid(val));\r\n            },\r\n            errorMessage: this.validationDictionary.invalid_gift_certificate,\r\n        });\r\n\r\n        return balanceValidator;\r\n    }\r\n}\r\n"],"names":["GiftCertificate","_PageManager","context","_this","call","validationDictionary","createTranslationDictionary","$certBalanceForm","$","$purchaseForm","$customAmounts","find","purchaseValidator","nod","submit","delay","tap","announceInputErrorMessage","length","$element","min","data","minFormatted","max","maxFormatted","add","selector","validate","cb","val","numberVal","Number","errorMessage","message","_len","arguments","amountRange","Array","_key","updatedErrorText","forEach","placeholder","i","includes","replace","insertFormattedAmountsIntoErrorMessage","certificate_amount_range","purchaseModel","toName","formModel","email","apply","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","getPage","err","content","updateContent","previewError","container","html","frame","width","attr","appendTo","frameDoc","contentWindow","document","contentDocument","write","close","maxheight","Math","window","height","ready","body","scrollHeight","createFrame","prototype","$balanceForm","balanceValidator","checkIsGiftCertValid","this","invalid_gift_certificate","PageManager"],"sourceRoot":""}